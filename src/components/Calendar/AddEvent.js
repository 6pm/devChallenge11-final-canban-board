import React from 'react'
import PropTypes from 'prop-types'
import moment from 'moment'

const minDuration = 0.01
const maxDuration = 12
const initialFieldsState = {
	title: {
		value: '',
		valid: false,
	},
	icon: {
		value: 'üóì',
	},
	id: {
		value: false,
	},
	start: {
		value: '',
		valid: false,
	},
	duration: {
		value: '',
		valid: false,
	},
}

export default class AddEvent extends React.PureComponent {

	static propTypes = {
		eventFormat: PropTypes.string.isRequired,
		onSubmitEvent: PropTypes.func.isRequired,
		onTogglePopup: PropTypes.func.isRequired,
		initData: PropTypes.oneOfType([
			PropTypes.object,
			PropTypes.bool,
		])
	}

	constructor(props) {
		super(props)

		this.updateField = this.updateField.bind(this)
	}

	componentWillMount = () => {
		const { initData } = this.props

		if(initData) {
			this.setInitData(initData)
		} else {
			this.setState(Object.assign({}, initialFieldsState))
		}
	}

	/**
	 * –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø–æ–ø–∞–ø –¥–∞–Ω–∏–º–∏ –∑ —ñ—Å–Ω—É—é—á–æ–≥–æ —ñ–≤–µ–Ω—Ç–∞ —ñ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –Ω–∏–º–∏ state
	 * 
	 * @param {Object} initData - –¥–∞—Ç–∞
	 */
	setInitData(initData) {
		this.setState({
			title: {
				value: initData.title,
				valid: true,
			},
			icon: {
				value: initData.icon,
			},
			id: {
				value: initData.id,
			},
			start: {
				value: initData.start,
				valid: true,
			},
			duration: {
				value: initData.duration,
				valid: true,
			},
		})
	}

	/**
	 * –û–Ω–æ–≤–∏—Ç–∏ –æ–¥–Ω–µ –ø–æ–ª–µ —ñ –ø—Ä–æ–≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–ª—è —î —Å–≤–æ—è
	 * –≤–∞–ª—ñ–¥–∞—Ü—ñ—è. –í —Ç–∏—Ö –ø–æ–ª—è—Ö, —è–∫—ñ –Ω–µ –æ–±–æ–≤—è–∑–∫–æ–≤—ñ, –ø—Ä–æ—Å—Ç–æ –º—ñ–Ω—è—î—Ç—å—Å—è value
	 * 
	 * @param {Object} e - –æ–±—î–∫—Ç —ñ–≤–µ–Ω—Ç–∞ onChange
	 */
	updateField = (e) => {
		const { eventFormat } = this.props
		const value = e.target.value
		const name = e.target.getAttribute('name')

		switch (name) {
		case 'title': {
			this.setState({
				[name]: {
					value: value,
					valid: !!value
				}
			})
			break
		}

		case 'start': {
			this.setState({
				[name]: {
					value: value,
					valid: moment(value, eventFormat, true).isValid()
				}
			})
			break
		}

		case 'duration': {
			const hours = Number(value)
			this.setState({
				[name]: {
					value: value,
					valid: hours && hours > minDuration && hours < maxDuration
				}
			})
			break
		}

		default: {
			this.setState({
				[name]: {
					value: value,
				}
			})
		}
		}
	}

	/**
	 * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ñ–æ—Ä–º–∞ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏. 
	 * –í—Å—ñ —Ñ—ñ–ª–¥–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ(valid: true).
	 * 
	 * @returns {Boolean} - –º—ñ—Å—Ç–∏—Ç—å —á–∏ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º–∞ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
	 */
	formNotValid() {
		const { title, start, duration } = this.state

		return ![ title, start, duration ].every(input => input.valid)
	}

	/**
	 * –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ä–º—É –∑ —ñ–≤–µ–Ω—Ç–æ–º. –î–∞–Ω—ñ –ø–æ–ø–∞–ø–∞ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏—â–µ
	 * —ñ –∑–∞–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –ø–æ–ø–∞–ø
	 */
	submitForm() {
		const { onSubmitEvent, onTogglePopup } = this.props
		const data = this.prepareFormData()

		onSubmitEvent(data)
		onTogglePopup()
	}

	/**
	 * –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —ñ–≤–µ–Ω—Ç –≤ —Ç–∞–∫–∏–π —Ñ–æ—Ä–º–∞—Ç, –≤ —è–∫–æ–º—É –≤—ñ–Ω –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ.
	 * –ü—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ —á–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —ñ–≤–µ–Ω—Ç –¥–æ–∞–ø–æ–≤–Ω—é—î—Ç—å—Å—è —ñ–Ω—à–∏–º–∏ –¥–∞–Ω–∏–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é.
	 * 
	 * @returns {Object} - –Ω–æ–≤–∏–π –æ–±—î–∫—Ç —ñ–≤–µ–Ω—Ç–∞
	 */
	prepareFormData() {
		const { title, icon, start, duration, id } = this.state
		const data = {
			title: title.value,
			icon: icon.value,
			start: start.value,
			duration: duration.value,
		}

		if (id.value) {
			data.id = id.value
		}

		return data
	}

	render() {
		const { onTogglePopup } = this.props
		const { title, icon, start, duration } = this.state

		return (
			<div className="dc-popup-wrap">
				<form 
					className="dc-popup"
					onSubmit={(e) => {
						this.submitForm()
						e.preventDefault()
					}}
				>
					<i onClick={onTogglePopup} className="dc-popup-close" title="close">x</i>
					
					<h2 className="dc-popup-title">Create event</h2>

					{/* –ø–æ–ª–µ –¥–ª—è –∑–º—ñ–Ω–∏ title */}
					<div className="dc-popup-row">
						<label className="dc-popup-row-name" htmlFor="dc-popup-title">Title</label>
						<div className="dc-popup-row-value">
							<input onChange={this.updateField} value={title.value} name="title" id="dc-popup-title" />
							{!title.valid && (
								<span className="dc-popup-error">Title is required</span>
							)}
						</div>
					</div>

					{/* –ø–æ–ª–µ –¥–ª—è –∑–º—ñ–Ω–∏ —ñ–∫–æ–Ω–∫–∏ */}
					<div className="dc-popup-row">
						<label className="dc-popup-row-name" htmlFor="dc-popup-icon">Icon</label>
						<div className="dc-popup-row-value">
							<input onChange={this.updateField} value={icon.value} name="icon" id="dc-popup-icon" />
							<span className="dc-popup-msg">You can copy emoji from <a href="http://getemoji.com/">emoji list</a> and paste into input</span>
						</div>
					</div>

					{/* –ø–æ–ª–µ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –¥–∞—Ç–∏ —ñ–≤–µ–Ω—Ç–∞ */}
					<div className="dc-popup-row">
						<label className="dc-popup-row-name" htmlFor="dc-popup-start">Start date</label>
						<div className="dc-popup-row-value">
							<input onChange={this.updateField} value={start.value} name="start" id="dc-popup-start" />
							{!start.valid && (
								<span className="dc-popup-error">Must be in format "D.M.YYYY H:m"</span>
							)}
						</div>
					</div>

					{/* –ø–æ–ª–µ –¥–ª—è –∑–º—ñ–Ω–∏ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —ñ–≤–µ–Ω—Ç–∞ */}
					<div className="dc-popup-row">
						<label className="dc-popup-row-name" htmlFor="dc-popup-duration">Duration</label>
						<div className="dc-popup-row-value">
							<input 
								onChange={this.updateField} value={duration.value} name="duration" type="number" id="dc-popup-duration" />
							{!duration.valid && (
								<span className="dc-popup-error">Must be in format "H.m" and not greater {maxDuration} hours</span>
							)}
						</div>
					</div>
						
					<button type="submit" disabled={this.formNotValid()} >Submit</button>
				</form>
			</div>
		)
	}
}
